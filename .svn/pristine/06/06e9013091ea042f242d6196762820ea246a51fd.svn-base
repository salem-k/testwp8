appContext.factory("ConnectionService", ['LoginService', '$http','SynchroServices','BuzcardService','ContactsService','LoadingService','MenuService', function(LoginService, $http,SynchroServices,BuzcardService,ContactsService,LoadingService,MenuService ) {


    /**
     * test if there is connection
     */
    var isConnected = function(db, connectedCallBack, notConnectedCallBack) {

      //forcer le mode offline
      if (MenuService.getLocalStorage("currentMode")=="ONLINE") {
        // the request parameters
        var testRequest = {
            method: 'GET',
            url: 'http://buzcard.fr/nepaseffacer.txt',
            timeout: 1000,
            params: { 
                'foobar': new Date().getTime() 
            },
        };
        // server call
        $http(testRequest).success(function(data, status, headers, config) {
            if (data == "OK") {
                LoginService.logout().success(
                    function(data, status, headers, config) {
                        LoginService.selectCredentials(db, function(result) {
                            LoginService.doLogin(result.rows.item(0).email,
                                result.rows.item(0).password).success(
                                function(data, status, headers, config) {
                                  execReq(db,function(){
                                    LoadingService.dismiss();
                                    return connectedCallBack();
                                  });
                                });
                        });
                    });
            } else {
                console.warn("not connected");
                return notConnectedCallBack();
            }
        }).error(function(data, status, headers, config) {
            console.error("error & not connected");
            return notConnectedCallBack();
        });
      //forcer le mode offline  
      } else {
        return notConnectedCallBack();
      }

     
    };


    function execReq(db,callBack){
      SynchroServices.selectAllRequest(db,function(result){
        if (result.rows.length > 0) {
          LoadingService.loading("Synchronisation en cours...");
          switch (result.rows.item(0).name) {
          case "BUZCARDEDIT":
            BuzcardService.updateProfilServer(0, JSON.parse(result.rows.item(0).object).profile,function(){
              SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                execReq(db,callBack);
              });
            },function(){
              //TODO FIXME en cas d'erreur 
            });
            break;


          case "CONTACTEDIT":
            ContactsService.updateContactServer(0, JSON.parse(result.rows.item(0).object).id,JSON.parse(result.rows.item(0).object).contact,function(){
              SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                execReq(db,callBack);
              });
            },function(){
              //TODO FIXME en cas d'erreur 
            });
            break;
            
          case "RENAMEGROUP":
            ContactsService.updateGroupServer(JSON.parse(result.rows.item(0).object).oldName,JSON.parse(result.rows.item(0).object).newName,function(){
              SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                execReq(db,callBack);
              });
            },function(){
              //TODO FIXME en cas d'erreur 
            });
            break;
            
          case "BUZCARDSEND":
            BuzcardService.sendBuzcardToServer(JSON.parse(result.rows.item(0).object).email, JSON.parse(result.rows.item(0).object).selectLang, JSON.parse(result.rows.item(0).object).checkFollower, JSON.parse(result.rows.item(0).object).dateRDV, function(){
              console.log(" ***** send ok  ******");
              //get contact from server
              ContactsService.getContactFromServerByEmail(JSON.parse(result.rows.item(0).object).email, function(data) {
                console.log("****** get email from server ok **** ");
                //select contact from local
                ContactsService.selectContactbyEmail(db, JSON.parse(result.rows.item(0).object).email, function(resultx) {
                  //it s a new contact
               if (data.contacts.contact.id != resultx.rows.item(0).id) {
                 //changement de id
                 ContactsService.updateContactIdByEmail(db,JSON.parse(result.rows.item(0).object).email,data.contacts.contact.id,function(){
                  /*******************************\
                    pr√©paration de l'objet serveur
                  \*******************************/
                   var contactObj = {};
                   var localContact = resultx.rows.item(0);
                   var remoteContact = data.contacts.contact;
                   for (var key in localContact)
                      if(remoteContact[key] != localContact[key])
                        contactObj[key] =localContact[key];
                     
                    delete contactObj.rendez_vous;
                    delete contactObj.id;
                    delete contactObj.date;
                    /** end **/
                    if(!isEmpty(contactObj)){
                      console.log("contactObj n est pas vide");
                      //add contact edit request
                      SynchroServices.insertRequest(db,"CONTACTEDIT",{id:remoteContact.id, contact:contactObj},function(){
                        // remove request
                        console.log("request inserted");
                        SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                          execReq(db,callBack);
                        });
                      });
                    }else {
                      console.log("contactObj est vide");
                   // remove request
                      SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                        execReq(db,callBack);
                      });
                    }


                 });
                 //contact existant
                }else {
                  SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                    execReq(db,callBack);
                  });
                }
                });    
 

              }, function() {
                  
              });
              
              
              
              
            },function(){
              //TODO FIXME en cas d'erreur 
            });
            break;
            
          case "BUZCARDPHOTO":
            BuzcardService.uploadPhotoProfil(JSON.parse(result.rows.item(0).object).path,function(){
              SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                execReq(db,callBack);
              });
            },function(){
              //TODO FIXME en cas d'erreur 
            });
            break;
            
          case "CONTACTPHOTO":
            ContactsService.uploadPhotoContact(JSON.parse(result.rows.item(0).object).path,JSON.parse(result.rows.item(0).object).id,function(){
              SynchroServices.deleteRequest(db,result.rows.item(0).id,function(){
                execReq(db,callBack);
              });
            },function(){
              //TODO FIXME en cas d'erreur 
            });
            break;
          }
        } else {
          return callBack();
        }
        
      });
    };
    
    /**
     * test if object is empty
     */
    function isEmpty(value){
      return Boolean(value && typeof value == 'object') && !Object.keys(value).length;
    };
    return {
        isConnected: isConnected,
    };
}]);