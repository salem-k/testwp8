//TODO FIXME css : cas de contact qui a un nom et pas de prenom
appContext.controller("ContactListController", [
    '$scope',
    'ContactsService',
    '$ionicPlatform',
    '$cordovaSQLite',
    'LoadingService',
    '$rootScope',
    'cameraService','$ionicHistory',
    function($scope, ContactsService, $ionicPlatform, $cordovaSQLite,LoadingService,$rootScope,cameraService,$ionicHistory) {

      var db = null;
      $ionicPlatform.ready(function() {
        /**
         * create/open DB
         */
        if (window.cordova) {
          db = $cordovaSQLite.openDB("buzcard.db"); // device
        } else {
          db = window.openDatabase("buzcard.db", '1', 'my', 1024 * 1024 * 10); // browser
        }
      
        	init();
      });

      $scope.creditParrainage =0;
      
     function init() {
     	//avant d'afficher la page afficher la page loading
    	  $ionicHistory.clearHistory();
    	LoadingService.loading("Chargement ...");
     	
     	// initialize
       var accordionNames = ["Tous mes contacts", "Tous mes followers"];
       $scope.tabs = [];
       $scope.groupTab =accordionNames;
       $scope.groups=[];
       $scope.groupName=[];
       $scope.recontact={
               name: "A contacter cette semaine",
               items: [],
               count: 0,
               empty: true,
       };
       $scope.search={
               name: "Résultat de recherche",
               items: [],
               empty: true,
       };
       $scope.show = false;
       
       // create accordion tabs
       for (var i = 0; i < 2; i++) {
         $scope.tabs[i] = {
           id: i,
           name: accordionNames[i],
           items: [],
           count: 0,
           page: 1,
           totalPages:1,
           empty: true,
         };
       }

       /**
        * begin of SQL transactions
        */
       // select the first contact page
       ContactsService.selectContacts(db, 1, function(result) {
      
         $scope.tabs[0].items = [];
         if (result.rows.length > 0) {
           $scope.tabs[0].empty = false;
           for (var int = 0; int < result.rows.length; int++) {
        	   //download photo contact by id ;
        	   downloadPhotoContacts($scope.tabs[0],result.rows.item(int).id, int);
        	   $scope.tabs[0].items.push(result.rows.item(int));
           }
           
         } else {
           $scope.tabs[0].items.push({});
           $scope.tabs[0].empty = true;
         }
         
         // select the first Followers page
         ContactsService.selectFollowers(db, 1, function(result) {
           $scope.tabs[1].items = [];
           if (result.rows.length > 0) {
             $scope.tabs[1].empty = false;
             for (var int = 0; int < result.rows.length; int++) {
            	   //download photo contact by id ;
            	 downloadPhotoContacts($scope.tabs[1],result.rows.item(int).id, int);
            	 $scope.tabs[1].items.push(result.rows.item(int));
             }
           } else {
             $scope.tabs[1].items.push({});
             $scope.tabs[1].empty = true;
           }
         //****************
           
           // get followers count
           ContactsService.getCountOfContact(db, "selected", function(result) {
             var fowllowersCount = 0;
             if (result.rows.length > 0) {
               for ( var key in result.rows.item(0)) {
                 fowllowersCount = result.rows.item(0)[key];
                 $scope.tabs[1].count = result.rows.item(0)[key];
                 $scope.tabs[1].totalPages = guessPagesNumber($scope.tabs[1].count);
               }
             } else {
               $scope.tabs[1].count = 0;
               $scope.tabs[1].empty = true;
             }
             // get contact count
             ContactsService.getCountOfContact(db, "cant_be_selected", function(result) {
               if (result.rows.length > 0) {
                 var nonFollowersCount = 0;
                 for ( var key in result.rows.item(0)) {
                   nonFollowersCount = result.rows.item(0)[key];
                   
                 }
                 $scope.tabs[0].count = nonFollowersCount + fowllowersCount;
                 $scope.tabs[0].totalPages = guessPagesNumber($scope.tabs[0].count);
               } else {
                 $scope.tabs[0].count = 0;
               }
               
               
             //get group list
             //get contact per group
             ContactsService.selectAllGroup(db,function(result){
               $scope.groupNumber = result.rows.length;
               if (result.rows.length > 0) {
                 for (var int = 0; int < result.rows.length; int++) {
                     $scope.groups[int]={
                             name : result.rows.item(int).name,
                             items : [],
                     };
                 }

                 ContactsService.getAllContactsByGroup(db,$scope,$scope.groups.length);
                 
                 //just aprés que les données soit charger afficher l ecran
                 LoadingService.dismiss();
                 
               }else {
                 //$scope.tabs[2].empty = true;
               }
               //get à recontacter list
               ContactsService.selectRecontact(db,function(result){
                 $scope.recontact.items = [];
                 if (result.rows.length > 0) {
                   $scope.recontact.empty = false;
                   $scope.recontact.count = result.rows.length;
                   for (var int = 0; int < result.rows.length; int++) {
                	   
                	   //download photo contact by id ;
                    	downloadPhotoContacts ($scope.recontact,result.rows.item(int).id, int);
                    		$scope.recontact.items.push(result.rows.item(int));
                   }
                 }else {
                   $scope.recontact.empty = true;
                 }
               });
             }); 
             });
           });
         });
       });
      }
          
     function downloadPhotoContacts (tab,id,i){
    	
      			 ContactsService.downloadPhotoContact(id,i, function(urlImg,i){
      	    		 tab.items[i].photo = urlImg;
      	    	  });	  
      		
    	
     }
      /*
       * if given group is the selected group, deselect it else, select the
       * given group
       */
      $scope.toggleGroup = function(group) {
        if ($scope.isGroupShown(group)) {
          $scope.shownGroup = null;
        } else {
          $scope.shownGroup = group;
        }
      };
      $scope.isGroupShown = function(group) {
        return $scope.shownGroup === group;
      };
      /**
       * if given group tab is the selected group tab, deselect it else, select the
       * given group tab
       */
      $scope.toggleGroupX = function(group) {
        if ($scope.isGroupShownX(group)) {
          $scope.shownGroupX = null;
        } else {
          $scope.shownGroupX = group;
        }
      };
      $scope.isGroupShownX = function(group) {
        return $scope.shownGroupX === group;
      };

      //show the search result
      $scope.btnSearch = function(criteria){
        $scope.search.items=[];
        if (!angular.equals( criteria.length,0)) {
         ContactsService.searchContact(db, criteria, function(result) {
           
           if (result.rows.length >0) {
             $scope.show = true;
            $scope.search.empty =false;
            for (var int = 0; int < result.rows.length; int++) {
            	
            	//download photo contact by id ;
            	downloadPhotoContacts ($scope.search,result.rows.item(int).id, int);
              $scope.search.items.push(result.rows.item(int));
            }
            if (!$scope.isGroupShown($scope.search)) {
              $scope.toggleGroup($scope.search);
            }
            
          } else {
            $scope.show = true;
            $scope.search.empty =true;
            if (!$scope.isGroupShown($scope.search)) {
              $scope.toggleGroup($scope.search);
            }
          }
         });
         }else {
          LoadingService.error("Veuillez remplir le champ","ContactListController");
        }
      };
      //next page
      $scope.forward = function(id) {
        switch (id) {
        case 0:
          console.log("-----------"+window.innerHeight);
          if ($scope.tabs[0].page < $scope.tabs[0].totalPages) {
            ContactsService.selectContacts(db, ($scope.tabs[0].page+1) , function(result) {
              console.log("-----------"+window.innerHeight);
              $scope.tabs[0].items = [];
              console.log("-----------"+window.innerHeight);
              if (result.rows.length > 0) {
                $scope.tabs[0].empty = false;
                for (var int = 0; int < result.rows.length; int++) {
                 
                	//download photo contact by id ;
                	 downloadPhotoContacts ($scope.tabs[0],result.rows.item(int).id, int);   
                	$scope.tabs[0].items.push(result.rows.item(int));
               
                }
                $scope.tabs[0].page++;
              } else {
                $scope.tabs[0].items.push({});
                $scope.tabs[0].empty = true;
              }
            });
          }

          break;
        case 1:
          if ($scope.tabs[1].page < $scope.tabs[1].totalPages) {
            ContactsService.selectContacts(db, ($scope.tabs[1].page+1) , function(result) {
              
              $scope.tabs[1].items = [];
              if (result.rows.length > 0) {
                $scope.tabs[1].empty = false;
                for (var int = 0; int < result.rows.length; int++) {
                	//download photo contact by id ;
               	 downloadPhotoContacts ($scope.tabs[1],result.rows.item(int).id, int);   
                 $scope.tabs[1].items.push(result.rows.item(int));
               
                }
                $scope.tabs[1].page++;
              } else {
                $scope.tabs[1].items.push({});
                $scope.tabs[1].empty = true;
              }
            });
          }
          break;
        }
      };
      //previous page
      $scope.rewind = function(id) {
        switch (id) {
        case 0:
          if ($scope.tabs[0].page >1) {
            ContactsService.selectContacts(db, ($scope.tabs[0].page-1) , function(result) {
              
              $scope.tabs[0].items = [];
              if (result.rows.length > 0) {
                $scope.tabs[0].empty = false;
                for (var int = 0; int < result.rows.length; int++) {
                	
                	//download photo contact by id ;
                	downloadPhotoContacts ($scope.tabs[0],result.rows.item(int).id, int);   
                	
                $scope.tabs[0].items.push(result.rows.item(int));
                  
                }
                $scope.tabs[0].page--;
              } else {
                $scope.tabs[0].items.push({});
                $scope.tabs[0].empty = true;
              }
            });
          }
          
          break;
        case 1:
          if ($scope.tabs[1].page > 1) {
            ContactsService.selectContacts(db, ($scope.tabs[1].page-1) , function(result) {
              
              $scope.tabs[1].items = [];
              if (result.rows.length > 0) {
                $scope.tabs[1].empty = false;
                for (var int = 0; int < result.rows.length; int++) {
                	//download photo contact by id ;
                	downloadPhotoContacts ($scope.tabs[1],result.rows.item(int).id, int);   
                  $scope.tabs[1].items.push(result.rows.item(int));
                  
                }
                $scope.tabs[1].page--;
              } else {
                $scope.tabs[1].items.push({});
                $scope.tabs[1].empty = true;
              }
            });
          }
          break;
        }
      };
      //Listener on search input 
      $scope.changeHandler= function(criteria){
       
        if (angular.equals( criteria.length,0)) {
          $scope.show = false;
        }
         
      };
      /**
       * return the total pages number
       */
      function guessPagesNumber(total) {
       var div = total/10;
        if( parseInt(div) == div ){
          return div ;
        }else{
          return parseInt(div+1);
        }
      }
      ContactsService.getCreditParrainage(function(credit) {
        
        $scope.creditParrainage = credit;
      });
      
      //dismiss popup
      $scope.dismiss= function(){ 
        LoadingService.dismiss();
      };
    }]);