appContext.controller("ContactEditController", [
    '$scope',
    '$state',
    '$filter',
    'ContactsService',
    'LoadingService',
    '$ionicPlatform',
    '$cordovaSQLite',
    '$stateParams',
    '$rootScope',
    'cameraService',
    '$ionicHistory',
    'ConnectionService',
    'SynchroServices',
    function($scope, $state, $filter, ContactsService, LoadingService,
            $ionicPlatform, $cordovaSQLite, $stateParams, $rootScope,
            cameraService,$ionicHistory,ConnectionService,SynchroServices) {

      var db = null;
      var tmpContact ={};
      $ionicPlatform.ready(function() {

        /**
         * create/open DB
         */
        if (window.cordova) {
          db = $cordovaSQLite.openDB("buzcard.db"); // device
        } else {
          db = window.openDatabase("buzcard.db", '1', 'my', 1024 * 1024 * 10); // browser
        }
        $ionicHistory.clearCache();
        getContact();
      });


      /**
       * get infos contact by id
       */
      function getContact() {
        // remplir select box
        ContactsService.selectAllGroup(db, function(result) {
          $scope.groups = new Array();
          for (var i = 0; i < result.rows.length; i++) {
            $scope.groups[i] = result.rows.item(i).name;
          }
          $scope.groups[$scope.groups.length] = "Nouveau Groupe";
        });

        ContactsService.getContactbyId(db, $stateParams.id, function(result) {
          tmpContact = angular.copy(result.rows.item(0)); 
          $scope.contact = result.rows.item(0);
          $scope.contact.last_name = removeSlashes(result.rows.item(0).last_name);
          $scope.contact.first_name = removeSlashes(result.rows.item(0).first_name);
          $scope.contact.company = removeSlashes(result.rows.item(0).company);
          $scope.contact.list = removeSlashes(result.rows.item(0).list);
          document.querySelector('#newGroupeName').value = removeSlashes(result.rows.item(0).list);
          $rootScope.oldGroupName = removeSlashes(result.rows.item(0).list);
          var idProfil = $rootScope.idProfil;
          cameraService.checkExistFile(idProfil, $scope.contact.id + '.jpg',function(url) {
                    $scope.photoProfil = url; // "img/photo_top_title.jpg";
                  });
          $scope.contact.rendez_vous = new Date(result.rows.item(0).rendez_vous * 1000);

          if ($scope.contact.rendez_vous == '1900-01-01'
                  || $scope.contact.rendez_vous == '1970-01-01') {

            $scope.contact.rendez_vous = '';
          }
          // select box groupes

        });
      };
      /**
       * click on button valider: update contact
       */
      $scope.updateContact = function(contact) {
        
        //cas de nouveau groupe & le champ est vide
        if (document.querySelector('#newGroupeName').value =="" && $scope.contact.list =="Nouveau Groupe") {
          LoadingService.error("Veuillez introduire un <br> nouveau nom du groupe","ContactEditController");
        
        //cas d'un groupe existant & le champ est vide
        }else if (document.querySelector('#newGroupeName').value =="" && $scope.contact.list !="Nouveau Groupe" && $scope.contact.list !="" && $scope.contact.list !=null) {
          LoadingService.error("Veuillez introduire un nom du groupe","ContactEditController");
          
         //tous les champs sont bien remplis 
        }else {
          
          /** begin initialisation */
          var contactObj = {};
          for(var key in contact)
            contactObj[key]=contact[key];
          var contactId = contact.id ;
          var oldName = contactObj.list;
          var newName = document.querySelector('#newGroupeName').value;
          contactObj.list = newName;
          /******* end *******/
          
          try {
            contactObj.rendez_vous = new Date(contact.rendez_vous) / 1000;
            // cas d'un nouveau groupe
            if ($scope.contact.list =="Nouveau Groupe" && !checkIfExist(newName,$scope.groups)){
              ContactsService.updateContactInfo(db, contactObj, function() { //update contact local
                ContactsService.insertIntoGroupTable(db,newName,function(){ //create new groupe local
                  ContactsService.selectContactByGroupName(db,$rootScope.oldGroupName,function(result){
                    //cas où l'ancien groupe sera vide
                      if (result.rows.length ==0){
                        ContactsService.deleteGroupByName(db,$rootScope.oldGroupName, function(result){
                          
                        });
                      }
                    });
                });
              });
            //cas rename groupe
            }else if(oldName != "Nouveau Groupe" && oldName != newName && newName !="" ) {
              
              ContactsService.updateContactInfo(db,contactObj , function() {   //update contact local
                ContactsService.editGroup(db,oldName,newName,function(result){ //edit groupe local
                  ContactsService.renameContactGroup(db,oldName,newName,function(result){ 

                    
                  });
                });
              });
            
          //cas nom de groupe existe déjà
          }else if($scope.contact.list =="Nouveau Groupe" && checkIfExist(newName,$scope.groups)){
            LoadingService.error("Ce nom de groupe existe déjà","ContactEditController");
            
            // cas de modification de groupe
          }else if(oldName !="Nouveau Groupe" && ((newName =="" && oldName == null) ||(newName == oldName ))){
            
            ContactsService.updateContactInfo(db,contactObj , function() {   //update contact local
              ContactsService.selectContactByGroupName(db,$rootScope.oldGroupName,function(result){
              //cas où l'ancien groupe sera vide
                if (result.rows.length ==0){
                  ContactsService.deleteGroupByName(db,$rootScope.oldGroupName, function(result){
                    
                  });
                }
              });
            });
          }
          }catch (e) {
            // TODO: handle exception
          }
          
          //test de connection
          ConnectionService.isConnected(db,function() {
                    //cas connecté
                	LoadingService.loading("Enregistrement du contact en cours...");
                    //cas nouveau groupe
                    if ($scope.contact.list =="Nouveau Groupe" && !checkIfExist(newName,$scope.groups)){
                      
                     /******************************\
                      préparation de l'objet serveur 
                     \******************************/
                     var contactObjx = {};
                     for (var key in tmpContact)
                        if(contact[key] != tmpContact[key])
                          contactObjx[key] =contact[key];
                      contactObjx.list = newName;
                      delete contactObjx.rendez_vous;
                      delete contactObjx.id;
                      delete contactObjx.date;
                      /******* end *******/
                      if(!isEmpty(contactObjx)){
                      ContactsService.updateContactServer(0, contactId, contactObjx,function(data){ // update contact server
                        if (data.update.status =="done") {
                          LoadingService.dismiss();
                          $ionicHistory.nextViewOptions({
                        	  disableBack: true
                        	});
                          $state.go("app.contactList");
                        } else {
                          LoadingService.error("Une erreur est servenu lors <br> de la synchronisation","ContactEditController");
                        }
                      },function(status){
                        console.error(status);
                        LoadingService.error("Une erreur réseau est servenu ","ContactEditController");
                      });}
                      else{
                        LoadingService.dismiss();
                        $ionicHistory.nextViewOptions({
                      	  disableBack: true
                      	});
                        $state.go("app.contactList");
                      }
                      
                    //cas rename groupe
                    }else if(oldName != "Nouveau Groupe" && oldName != newName && newName !="" ) {
                      ContactsService.updateGroupServer(oldName,newName, function(result){ //edit groupe server 
                        
                       /*******************************\
                        préparation de l'objet serveur
                       \*******************************/
                       var contactObjx = {};
                       for (var key in tmpContact)
                          if(contact[key] != tmpContact[key])
                            contactObjx[key] =contact[key];
                       
                        delete contactObjx.rendez_vous;
                        delete contactObjx.id;
                        delete contactObjx.date;
                        contactObjx.list = newName;
                        /******* end *******/
                        if(!isEmpty(contactObjx)){
                        ContactsService.updateContactServer(0,contactId, contactObjx,function(data){ // update contact server
                          if (data.update.status =="done") {
                            LoadingService.dismiss();
                            $ionicHistory.nextViewOptions({
                          	  disableBack: true
                          	});
                            $state.go("app.contactList");
                          } else {
                            LoadingService.error("Une erreur est servenu lors <br> de la synchronisation","ContactEditController");
                          }
                        },function(status){
                          console.error(status);
                          LoadingService.error("Une erreur réseau est servenu ","ContactEditController");
                        });}
                        else{
                          LoadingService.dismiss();
                          $ionicHistory.nextViewOptions({
                        	  disableBack: true
                        	});
                          $state.go("app.contactList");
                        }
                      });
                      //cas nom de groupe existe déjà
                    }else if($scope.contact.list =="Nouveau Groupe" && checkIfExist(newName,$scope.groups)){
                      LoadingService.error("Ce nom de groupe existe déjà","ContactEditController");
                      
                      // cas de modification de groupe
                    }else if(oldName !="Nouveau Groupe" && ((newName =="" && oldName == null) ||(newName == oldName ) )  ){
                      
                     /*******************************\
                      préparation de l'objet serveur
                     \*******************************/
                     var contactObjx = {};
                     for (var key in tmpContact)
                        if(contact[key] != tmpContact[key])
                          contactObjx[key] =contact[key];
                     
                      delete contactObjx.rendez_vous;
                      delete contactObjx.id;
                      delete contactObjx.date;
                      contactObjx.list = newName;
                      /******* end *******/
                      if(!isEmpty(contactObjx)){
                      ContactsService.updateContactServer(0,contactId, contactObjx,function(data){ // update contact server
                        if (data.update.status =="done") {
                          LoadingService.dismiss();
                          $ionicHistory.nextViewOptions({
                        	  disableBack: true
                        	});
                          $state.go("app.contactList");
                        } else {
                          LoadingService.error("Une erreur est servenu lors <br> de la synchronisation","ContactEditController");
                        }
                      },function(status){
                        console.error(status);
                        LoadingService.error("Une erreur réseau est servenu ","ContactEditController");
                    });}
                      else{
                    	  
                        LoadingService.dismiss();
                        $ionicHistory.nextViewOptions({
                      	  disableBack: true
                      	});
                        $state.go("app.contactList");
                      }
                    }
                    
                  }, function() {
                    
                  //cas non connecté
                    if (contact.id.toString().length == 10) {
                      $state.go("app.contactList");
                      $ionicHistory.nextViewOptions({
                        disableBack: true
                      });
                      console.log("********* lenght == 10 ");
                      
                    } else {
                      console.log("********* lenght not equal a 10 ");
                      LoadingService.loading("Enregistrement du contact en cours...");
                                          
                         /*******************************\
                          préparation de l'objet serveur
                         \*******************************/
                          if (oldName == null)
                            oldName="";
                          
                         var contactObjx = {};
                         for (var key in tmpContact)
                            if(contact[key] != tmpContact[key])
                              contactObjx[key] =contact[key];
                         
                          delete contactObjx.rendez_vous;
                          delete contactObjx.id;
                          delete contactObjx.date;
                          
                          contactObjx.list = newName;
                          /******* end *******/
      //                    console.log(contactObjx);
                          //cas rename groupe //2 requete 
                          if(oldName != "Nouveau Groupe" && oldName != newName && newName !="") {
                            
                            SynchroServices.insertRequest(db,"RENAMEGROUP",{newName:newName,oldName:oldName},function(result){
                              if (!isEmpty(contactObjx)) {
                            console.info("not emptyy");
                                SynchroServices.insertRequest(db,"CONTACTEDIT",{id:$stateParams.id, contact:contactObjx},function(result){
      
                                  LoadingService.dismiss();
                                  $state.go("app.contactList");
                                  $ionicHistory.nextViewOptions({
                                	  disableBack: true
                                	});
                                });
                              }else{
                                LoadingService.dismiss();
                                $ionicHistory.nextViewOptions({
                              	  disableBack: true
                              	});
                                $state.go("app.contactList");
                              }
                            });
                          
                          }else if(!isEmpty(contactObjx)){ 
                            console.info(JSON.stringify(contactObjx));
                            SynchroServices.insertRequest(db,"CONTACTEDIT",{id:$stateParams.id, contact:contactObjx},function(result){
                              LoadingService.dismiss();
                              $ionicHistory.nextViewOptions({
                            	  disableBack: true
                            	});
                              $state.go("app.contactList");
                            });
                          }else {
                            console.info(contactObjx);
                            LoadingService.dismiss();
                            $ionicHistory.nextViewOptions({
                          	  disableBack: true
                          	});
                            $state.go("app.contactList");
                          }
                    }
                    
           });
        }
        

        
      };
      /**
       * click on button supprimer: delete contact
       */
      $scope.deleteContact = function() {
        LoadingService.question("Voulez-vous vraiment supprimer ce contact ?",
                $stateParams.id, "ContactEditController");
      };

      /**
       * click on button Non (popup suppression)
       */
      $scope.no = function() {
        LoadingService.dismiss();
      };

      /**
       * click on button Yes (pop up suppression )
       */
      $scope.yes = function(params) {
        ContactsService.deleteContactLocal(db, params, function() {
          ContactsService.selectContactByGroupName(db,$rootScope.oldGroupName,function(result){ 
            //cas où l'ancien groupe sera vide
            if (result.rows.length ==0){
              ContactsService.deleteGroupByName(db,$rootScope.oldGroupName, function(result){
                console.log("group is empty : deleted");
              });
            }
          });
        });

        //test de connection
        ConnectionService.isConnected(db,function() {
          // cas connecté
          // TODO FIXME il faut traiter le cas ou la session est expiré
          LoadingService.loading("Enregistrement du contact en cours...");
          
          ContactsService.deleteContactServer(params,function(data){
            
            if (data.update.status =="done") {
              LoadingService.dismiss();
              $state.go("app.contactList");
              $ionicHistory.nextViewOptions({
            	  disableBack: true
            	});
            } else {
              LoadingService.error("Une erreur est servenu lors <br> de la synchronisation","ContactEditController");
            }
            
          },function(status){
            console.error(status);
            LoadingService.error("Une erreur réseau est servenu ","ContactEditController");
          });
          
        }, function() {
          //cas non connecté
          SynchroServices.insertRequest(db,"CONTACTDELETE",{id:$stateParams.id},function(){

            LoadingService.dismiss();
            $ionicHistory.nextViewOptions({
          	  disableBack: true
          	});
            $state.go("app.contactList");
          });
            
        });
      };
      /**
       * convert date to timeStamp
       */
      function toTimeStamp(myDate) {
        myDate = myDate.split("-");
        var newDate = myDate[1] + "/" + myDate[0] + "/" + myDate[2];
        x = new Date(newDate).getTime() / 1000;
        return x;

      }
      /**
       * capture photo
       */
      $scope.getPhoto = function() {
    	  var options = {
    			  quality: 50,
    		      destinationType: Camera.DestinationType.FILE_URI,
    		      sourceType: Camera.PictureSourceType.CAMERA,
    		      encodingType: Camera.EncodingType.JPEG,
    	          targetWidth: 100,
    	          targetHeight: 100,
    	          popoverOptions: CameraPopoverOptions
    		    };

        cameraService.getPicture(options).then(function(imageURI) {
          var idProfil = $rootScope.idProfil;
          var fileName = idProfil + '/' + $stateParams.id + '.jpg';
          $scope.photoProfil = imageURI;
          cameraService.RenamePicture(fileName, imageURI, function(url) {
            $scope.photoProfil = url + '?' + new Date().getTime();
            ConnectionService.isConnected(db,function() {
            	//cas ou il ya connexion 
            	  ContactsService.uploadPhotoContact(url, $stateParams.id, function(){
                  	console.log('uploaded CONTACTPHOTO');
                  }, function(){
                	  console.log('erreur upload photo contact');
                  });
            },function(){
            	// cas pas de connexion 
            	 SynchroServices.insertRequest(db, "CONTACTPHOTO", {id:$stateParams.id, path:url}, function() {
            		 console.log('Request inserted CONTACTPHOTO');
            });
          
         });
           
          });
        }, function(err) {
          console.err(err);
        });
      };
      /**
       * choose file from library
       */
      $scope.choseFile = function() {
        var options = {
          quality: 50,
          destinationType: Camera.DestinationType.FILE_URI,
          sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
          encodingType: Camera.EncodingType.JPEG,
          targetWidth: 100,
          targetHeight: 100,
          popoverOptions: CameraPopoverOptions
        };

        cameraService.getPicture(options).then(function(imageURI) {
          var idProfil = $rootScope.idProfil;
          var fileName = idProfil + '/' + $stateParams.id + '.jpg';
          $scope.photoProfil = imageURI;
          var imageURL = imageURI.substr(0, imageURI.lastIndexOf('?'));
          cameraService.RenamePicture(fileName, imageURL, function(url) {
        	  $scope.photoProfil = url + '?' + new Date().getTime();
        	  
        	  ConnectionService.isConnected(db,function() {
              	//cas ou il ya connexion 
              	  ContactsService.uploadPhotoContact(url, $stateParams.id, function(){
                    	console.log('uploaded CONTACTPHOTO');
                    }, function(){
                  	  console.log('erreur upload photo contact');
                    });
              },function(){
              	// cas pas de connexion 
              	 SynchroServices.insertRequest(db, "CONTACTPHOTO", {id:$stateParams.id, path:url}, function() {
              		 console.log('Request inserted CONTACTPHOTO');
              });
            
           });
        	  
           
          
          });
        }, function(err) {
          console.error(err);
        });

      };
      
     
      /**
       * select box handler
       */
      $scope.changeHandler = function() {
        
        if ( $scope.contact.list != "Nouveau Groupe") {
          document.querySelector('#newGroupeName').value = $scope.contact.list;
        }
        else{
          document.querySelector('#newGroupeName').value = "";
        }
      };
    
      // to dismiss the PopUp
      $scope.dismiss = function() {
        LoadingService.dismiss();
        
      };
      
      
      function checkIfExist(string,array){  
        if(string !="" && array.length>0){
          var exist = false;
         for (var int = 0; int < array.length; int++) {
           if (array[int] == string) 
             exist =true;
         } 
         return exist;
        }else return false;
      }
      
      function isEmpty(value){
        return Boolean(value && typeof value == 'object') && !Object.keys(value).length;
      };
    }]);